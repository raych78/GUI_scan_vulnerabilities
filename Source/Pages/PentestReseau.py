from tkinter import *
from tkinter import ttk
import tkinter
import os
import re
import subprocess

class PentestReseau(Frame):
	def __init__(self, parent, controller):
		Frame.__init__(self, parent)
		self.configure(background='black')

		host_discovery_frame = LabelFrame(self, text="Host Discovery and Port Discovery on a network\n", font=("Arial",20))
		host_discovery_frame.place(x=30,y=30,height=800,width=870)

# IP source, Mask and Communication protocol
		ip_target_machine = tkinter.StringVar()
		mask = tkinter.StringVar()


#Ip of the target machine
		ip_target_machine_label = ttk.Label(host_discovery_frame, text="@ IP of the target subnetwork:")
		ip_target_machine_label.grid()

		ip_target_machine_entry = ttk.Entry(host_discovery_frame, textvariable=ip_target_machine)
		ip_target_machine_entry.grid()
		ip_target_machine_entry.focus()

# Mask

		mask_label = ttk.Label(host_discovery_frame, text="\nMask of the target subnetwork:")
		mask_label.grid()

		mask_entry = ttk.Entry(host_discovery_frame, textvariable=mask)
		mask_entry.grid()
		mask_entry.focus()

#Communication protocol

		protocol_label = ttk.Label(host_discovery_frame, text = "\nSelect the protocol to perform the request")
		protocol_label.grid()

		protocol_choices= ['ARP', 'ICMP', 'UDP', 'TCP', 'TCPnoSudo']
		protocol = StringVar(value=protocol_choices)
		list_protocol = Listbox(host_discovery_frame, listvariable=protocol, selectmode=SINGLE, exportselection=False)
		list_protocol.grid(column=0)


#Verify if the format of IP address and the Mask

		def is_valid_ipv4():
			pattern = r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$'
			return re.match(pattern, ip_target_machine.get()) is not None 

		def is_valid_mask():
			pattern = r'^(3[0-2]|[1-2]?[0-9])$'
			return re.match(pattern, mask.get()) is not None

#Function for the host discovery 

		def host_discovery():
			scan_report = 0

			for i in list_protocol.curselection():
				selected_protocol = list_protocol.get(i)
			
			print(f"We will scan host discovery for the network of the target machine {ip_target_machine.get()}/{mask.get()} \n\n")
			

			valid_ip_address = is_valid_ipv4()					
			valid_mask = is_valid_mask()

			if selected_protocol == "ARP" and valid_ip_address and valid_mask:
				print(f"Performing an ARP Host Discovery Scan : sudo nmap -PR -sn {ip_target_machine.get()}/{mask.get()}")
				scan_report = os.popen(f"sudo nmap -PR -sn {ip_target_machine.get()}/{mask.get()}").read()				
				

			elif selected_protocol == "ICMP" and valid_ip_address and valid_mask: 
				print(f"Performing a ICMP Host Discovery Scan : sudo nmap -PE -sn {ip_target_machine.get()}/{mask.get()}")
				scan_report = os.popen(f"sudo nmap -PE -sn {ip_target_machine.get()}/{mask.get()}").read()

			elif selected_protocol == "TCP" and valid_ip_address and valid_mask:
				print(f"Performing a TCP Host Discovery Scan : sudo nmap -PS -sn {ip_target_machine.get()}/{mask.get()}")
				scan_report = os.popen(f"sudo nmap -PS -sn {ip_target_machine.get()}/{mask.get()}").read()

			elif selected_protocol == "UDP" and valid_ip_address and valid_mask:
				print(f"Performing a UDP Host Discovery SCcan : sudo nmap -PU -sn {ip_target_machine.get()}/{mask.get()} ")
				scan_report = os.popen(f"sudo nmap -PU -sn {ip_target_machine.get()}/{mask.get()}").read()

			elif not valid_ip_address:
				scan_report = f"The ip address {ip_target_machine.get()} is not valid !"

			elif not valid_mask:
				scan_report = f"The mask {mask.get()} is not valid !"

			else:
				scan_report = f"The protocol {selected_protocol} to perform your querie is not available"

			result_label.configure(text=scan_report)


		
		def stop_scan():
			raise KeyboardInterrupt

#Port Discovery Scan

		def port_discovery():

			for i in list_protocol.curselection():
				selected_protocol = list_protocol.get(i)

			valid_ip_address = is_valid_ipv4()					
			valid_mask = is_valid_mask()

			print(f"We will scan host discovery for the network of the target machine {ip_target_machine.get()}/{mask.get()} \n\n")			
			
			if selected_protocol == "TCP" and valid_ip_address:
				print(f"Performing a TCP Port Discovery Scan : sudo nmap -sS {ip_target_machine.get()}")
				scan_report = os.popen(f"sudo nmap -sS -F {ip_target_machine.get()}").read()

			elif selected_protocol == "TCPnoSudo" and valid_ip_address:
				print(f"Performing a TCP no sudoer Port Discovery Scan : nmap -sT {ip_target_machine.get()}")
				scan_report = os.popen(f"nmap -sT -F {ip_target_machine.get()}").read()

			elif selected_protocol == "UDP" and valid_ip_address:
				print(f"Performing a UDP Port Discovery SCcan : sudo nmap -sU {ip_target_machine.get()}")
				scan_report = os.popen(f"sudo nmap -sU -F {ip_target_machine.get()}").read()

			elif not valid_ip_address:
				scan_report = f"The ip address {ip_target_machine.get()} is not valid !"

			else:
				scan_report = f"The protocol {selected_protocol} doesn't work with Port Scan"
		
			result_label.configure(text=scan_report)

			

# Lancer et stopper l'attaque DOS avec le boutton
		host_discovery_button_start = ttk.Button(host_discovery_frame, text="Start Host Discovery", command=host_discovery)
		host_discovery_button_start .grid()

		host_discovery_button_start = ttk.Button(host_discovery_frame, text="Start Port Discovery", command=port_discovery)
		host_discovery_button_start .grid()

		dos_button_stop = ttk.Button(host_discovery_frame, text="Stop scan", command=stop_scan)
		dos_button_stop.grid()

#Affiche les r√©sultats ici
		result_label = ttk.Label(host_discovery_frame, text="The report appear here...")
		result_label.grid()
